Тема: Дослідження особливостей використання вказівників у мові С
Мета роботи: Дослідити властивості циклічних операторів мови С.
Хід роботи:
1.	Здійснити табулювання функції, що з певними припущеннями з  достатньою точністю моделює імпульс Максвела, який утворюється при  ударному збудженні широкосмугової антени. Обчислення провести на  проміжку зміни і в межах [0-31] з кроком i=1, N=32. Результати вивести у  вигляді таблиці. Визначити найбільше та найменше значення функції на цьому  проміжку.
 
#include <stdio.h>
#include <math.h>

int main() {
    int N = 32;
    double y, min_value, max_value;
    int min_i = 0, max_i = 0;
    min_value = INFINITY;
    max_value = -INFINITY;
    printf("  i  |         y\n");
    printf("-----|--------------------\n");
    for (int i = 0; i <= 31; i++) {
        y = i * i * exp(-i * i / 100.0) * sin(2 * M_PI * i / N);
        printf("%3d  | %0.10f\n", i, y);
        if (y < min_value) {
            min_value = y;
            min_i = i;
        }
        if (y > max_value) {
            max_value = y;
            max_i = i;
        }
    }
    printf("\nНайменше значення функції: y(%d) = %0.10f\n", min_i, min_value);
    printf("Найбільше значення функції: y(%d) = %0.10f\n", max_i, max_value);
    return 0;
}














2. В обчислювальних задачах при програмуванні ітераційних  алгоритмів, що закінчуються при досягненні заданої точності, часто необхідна  оцінка «машинного нуля», тобто числового значення, менше за яке неможливо  задати точність даного алгоритму. Абсолютне значення «машинного нуля»  залежить від розрядної сітки застосовуваного комп’ютера, від прийнятої в  конкретному трансляторі точності представлення дійсних чисел і від значень,  що використовуються для оцінки точності. Наступна програма оцінює  абсолютне значення «машинного нуля» відносно близьких (за модулем) до  одиниці змінних типу float.
#include <stdio.h>

int main() {
    float smallest_float = 1.0f;

    while (smallest_float / 2.0f > 0.0f) {
        smallest_float /= 2.0f;
    }

    printf("Машинний нуль для типу float: %e\n", smallest_float);

    return 0;
}



















 3. Заповнити екран монітора символами так, щоб утворити прямокутний  трикутник зображений на рисунку, використавши для цього вкладені цикли.
#include <stdio.h>
int main() {
    int height = 10;
    for (int i = 1; i <= height; i++) {
        for (int j = 1; j <= i; j++) {
            printf("*");
        }
        printf("\n");
    }
    return 0;
}


















4. Обчислити значення скінченої суми, або добутку згідно свого  варіанту. Врахувати, що навіть для невеликих чисел значення факторіала може  вийти за гранично допустимі для даного типу даних. Аргумент  тригонометричних функцій задавати в межах:
#include <stdio.h>
#include <math.h>

int main() {
    // Вхідні дані
    int N;
    double x;
    
    // Введення значень N та x
    printf("Введення значень N та x: ");
    scanf("%d", &N);
    printf("Введення X ");
    scanf("%lf", &x);
    
    // Змінна для збереження результату суми
    double S = 0.0;

    // Обчислення суми
    for (int k = 1; k <= N; k++) {
        double product = 1.0;
        for (int m = 1; m <= 2 * k; m++) {
            product *= sin((m * x) / (2 * k + 1));
        }
        S += product;
    }

    // Вивід результату
    printf("Result S: %lf\n", S);

    return 0;
} 















5. Відомо, що одним із методів обчислення багатьох функцій є  розкладання їх у ряд Тейлора:
 
Завдання: для заданого х, яке уводиться з клавіатури під час роботи  програми, обчислити значення функції y за допомогою бібліотечних функцій  компілятора так і за допомогою вище наведеного явного розкладу її в ряд  (ітераційний процес до досягнення заданої точності). Обчислити при цьому  також кількість ітерацій або кількість членів ряду в розкладі функції. Точність  обчислень, тобто значення члена ряду розкладу функції коли необхідно  припиняти ітераційний процес, a=0.00001. Аргумент тригонометричних  функцій задавати в межах:  0  
#include <stdio.h>
#include <math.h>

double taylor_sin(double x, double a, int *iterations) {
    double term = x;
    double result = 0.0;
    double sign = 1.0;
    int n = 1;

    while (fabs(term) >= a) {
        result += term;
        sign = -sign;
        term = sign * pow(x, 2 * n + 1) / tgamma(2 * n + 2);
        n++;
    }

    *iterations = n;
    return result;
}

int main() {
    double x;
    double precision = 0.00001;
    int iterations_taylor;

    printf("Введіть значення x для обчислення sin(x): ");
    scanf("%lf", &x);

    // Використовуємо бібліотечну функцію sin(x)
    double sin_x_lib = sin(x);

    // Обчислюємо sin(x) за допомогою ряду Тейлора
    double sin_x_taylor = taylor_sin(x, precision, &iterations_taylor);

    printf("За допомогою бібліотечної функції: sin(%lf) = %lf\n", x, sin_x_lib);
    printf("За допомогою ряду Тейлора: sin(%lf) = %lf\n", x, sin_x_taylor);
    printf("Кількість ітерацій для ряду Тейлора: %d\n", iterations_taylor);

    return 0;
}









Висновок: 
На даній лабораторній роботі було проведено дослідження особливостей використання вказівників на мові програмування С.
