1.	Здійснити виконання програми порівняння двох чисел: #include <stdio.h>
void main(void)
{ float var1, var2;
printf("Введіть перше число (var1): "); scanf("%f", &var1);
printf("Введить друге число (var2): "); scanf("%f", &var2);
printf("var1 > var2 дає %d\n", var1 > var2); printf("var1 < var2 дає %d\n", var1 < var2);
printf("var1 == var2 дає %d\n", var1 == var2); printf("var1 >= var2 дає %d\n", var1 >= var2); printf("var1 <= var2 дає %d\n", var1 <= var2); printf("var1 != var2 дає %d\n", var1 != var2); printf("!var1 дає %d\n", !var1);
printf("!var2 дає %d\n", !var2); printf("var1 || var2 дає %d\n", var1 || var2);
printf("var1 && var2 дає %d\n", var1 && var2);
}





2.	Здійснити	модифікацію	та	виконання	програми	згідно	взірця, показаного нижче..
#include <stdio.h>

#define TRUE "ІСТИНА"
#define FALSE "ХИБНІСТЬ"

void main(void) {
  float var1, var2;

  // Запит введення чисел
  printf("Введіть перше число (var1): ");
  scanf("%f", &var1);
  printf("Введіть друге число (var2): ");
  scanf("%f", &var2);

  // Порівняння var1 і var2 за допомогою операторів порівняння
  printf("var1 > var2 це %s\n", var1 > var2 ? TRUE : FALSE);
  printf("var1 < var2 це %s\n", var1 < var2 ? TRUE : FALSE);
  printf("var1 == var2 це %s\n", var1 == var2 ? TRUE : FALSE);
  printf("var1 >= var2 це %s\n", var1 >= var2 ? TRUE : FALSE);
  printf("var1 <= var2 це %s\n", var1 <= var2 ? TRUE : FALSE);
  printf("var1 != var2 це %s\n", var1 != var2 ? TRUE : FALSE);

  // Логічні операції з var1 і var2
  printf("var1 || var2 це %s\n", var1 || var2 ? TRUE : FALSE);
  printf("var1 && var2 це %s\n", var1 && var2 ? TRUE : FALSE);

  // Унарні оператори 
  printf("!var1 це %s\n", !var1 ? TRUE : FALSE);
  printf("!var2 це %s\n", !var2 ? TRUE : FALSE);
}













  int x,y,z;
x=2; y=1; z=0; Ініціалізуємо змінні
// Виконується логічна функція (І) між х і y , а потім результат цієї операції обєднюється з z через АБО printf
x=x && y || z; 
printf("%d\n",x || !y && z);


















#include <stdio.h>
#include <conio.h>

void main() { 
    int a = 0, b = 3, c; - ініціалізуємо змінні
    c = b % 2 || (a >= 0) && (++b / 2 *  a)== 0; остача від ділення 1 (АБО) а більше рівне нулю (І) збільшуємо b на 1,ділимо на 2а),отримавши 0.
Оскільки b % 2 = 1,що є true і a більше нуля, що також true,то отримуємо 1.
    printf("a=%d, c=%d\n", a, c); /* a=0,  c=1 */
    getch();
}

















#include <stdio.h>
#include <conio.h>

void main() {
    int a = 1, b = 0, c;
    // Обчислюється вираз і присвоюється змінній c.
    c = b * 2 || (a >= 0) && (++b * a) == 0;
    // Виводиться значення змінної c.
    printf("c=%d\n", c); // Вивід: c=0
    getch(); // Очікується натискання клавіші користувачем.
}}

















#include <stdio.h>
#include <conio.h>

void main() {
    int x = 1, y = 2, z;
    // Обчислюється вираз і присвоюється змінній z.
    z = (x / 2 * 7 <= 0) && (y < 0) || (y % x == 0);
    // Зменшується значення змінної z на 1 перед виведенням.
    printf("z=%d\n", --z); // Виводиться значення змінної z.
    getch(); // Очікується натискання клавіші користувачем.
}















#include <stdio.h>
#include <conio.h>

void main() {
    int x = 1, z, b = 0, y = 2;
    // Оголошуємо змінні x, z, b, y та ініціалізуємо їх значеннями: x=1, b=0, y=2.
    // Змінна z залишається неініціалізованою до присвоєння.

    z = (x++ * y >= 0) || b++ || (x / y * 3 == 0);
    // Обчислюємо вираз та присвоюємо значення змінній z.
    // Оскільки умова виразу присвоєння оцінюється зліва направо, спочатку виконується x++ * y.
    // x++ означає, що спочатку використовується поточне значення x, а потім x збільшується на 1.
    // Таким чином  x++ * y = 1 * 2 = 2  дорівнює true.
    // Далі обчислюється (x++ * y >= 0), тобто (2 >= 0), що дорівнює true.
    // Таким чином, перша частина виразу за || дорівнює true, тому всі наступні можна не обчислювати,
    // достатньо, щоб одна частина за || була true, щоб весь вираз був true.

    printf("z=%d\n", z); // Виводимо значення .
    getch(); // Чекаємо на натискання.
}}












#include <stdio.h>
#include <conio.h>

void main() {
    int x = 1, y = 0, z = 2;
    int a = 0;
    z = ((a = x++) * y == 0 || a < 0 && z);
    printf("z=%d\n", z); /*z=1*/
    getch();
}













#include <stdio.h>
#include <conio.h>

void main() {
    int x = 2, z, y = 0;
    // Оголошення та ініціалізація змінних x, y, та z
    // x отримує значення 2, y отримує значення 0
    // z залишається неініціалізованою до присвоєння

    // Обчислення виразу для змінної z
    z = (x == 0) && (y = x) || (y > 0);
    // Порівнюємо x з 0: якщо x дорівнює 0, вираз (x == 0) буде істинним (1), інакше - хибним (0)
    // Тут y = x присвоюється значення x, тобто 2, але це виконується тільки якщо перший операнд у виразі буде істинним
    // У нашому випадку x не дорівнює 0, тому y залишається 0
    // (x == 0) && (y = x) переходить до (y > 0), що перевіряє, чи y більше 0
    // У нашому випадку y дорівнює 0, тому (y > 0) є хибним (0)
    // Вираз (x == 0) && (y = x) отже дорівнює хибному (0)
    // Отже, весь вираз зворотньої логіки ((x == 0) && (y = x)) || (y > 0) дорівнює (0 || 0), тобто хибному (0)

    // Виведення результату
    printf("z=%d\n", z); // Очікується виведення "z=0" на екран
    getch(); // Очікування натискання клавіші користувачем
} 
 
}











#include <stdio.h>
#include <conio.h>

void main()
{ 
    int x = 0, y = 3, z; // Оголошуємо цілі змінні x, y, z та ініціалізуємо x=0, y=3.
    z = (++x > y || y-- && y > 0); // Обчислюємо вираз та присвоюємо його значення змінній z.
    printf("z=%d\n", z); // Виводимо значення змінної z.
    getch(); // Очікуємо на натискання клавіші користувачем.
}












Виправити помилки в прикладах:

#include <stdio.h>
#include <conio.h>

void main() {
    unsigned int x = 2, y = 1, z = 3, res;
    char chx = 0xAF;
    printf("%u\n", x & y | z); /* 3 */
    x = y = z = 2;
    printf("%u\n", x | y & z); /* 2 */
    x = 3; y = 0; z = 1;
    printf("x^y|~z=%u\n", x ^ y | ~z); /* 4294967295 (unsigned int max value) */
    printf("3|0^~1=%u\n", x | y ^ ~z); /* 4294967295 (unsigned int max value) */
    x = 1; y = 2; z = 0;
    // Побітові операції: (1 & 2) | 0 = 0 | 0 = 0
    printf("1&2|0=%u\n", x & y | z); /* 0 */
    printf("~1^2&0=%u\n", ~x ^ y & z); /* 4294967294 (unsigned int max - 1) */
    printf("2|0&1=%u\n", y | z & x); /* 2 */
    printf("2++&~0|~1=%u\n", y++ & ~z | ~x); /* 4294967294 (unsigned int max - 1) */
    
    printf("~3|1&++0=%u\n", ~y | x & ++z); /* 4294967293 (unsigned int max - 2) */
    x = 0xAF;
    printf("%X\n", x >> 4); /* A */
    chx <<= 7;
    printf("0x=%X\n", (unsigned char)chx); /* 80 */
    getch();
}



















#include <stdio.h>
#include <conio.h>

void main() {
    char x = 255, y = 0177;
    printf("%d\n", x & y);   /* 127 */
    
    x = '™'; y = 017;
    printf("%d\n", x & ~y);  /* 65424 */
    
    y = 127;
    printf("%d\n", x & y);   /* Виведе значення x & y */
    
    y = 128;
    printf("%d\n", x | y);   /* 193 */
}











Висновок
На даній лабораторній роботі проводив дослідження властивостей операцій порівняння, логічних бітових мови програмування С.
