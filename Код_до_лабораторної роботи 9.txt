Приклад 1(написати самому програму):
#include <stdio.h>
int main() {
    // Оголошення змінних у вісімковій системі числення
    int a = 017; // 017 у вісімковій системі дорівнює 15 у десятковій
    int b = 036; // 036 у вісімковій системі дорівнює 30 у десятковій

    // Побітове AND
    int and_result = a && b;
    printf("a && b = %d (вісімкова: %o)\n", and_result, and_result);

    // Побітове OR
    int or_result = a || b;
    printf("a || b = %d (вісімкова: %o)\n", or_result, or_result);

    // Зсув вліво на 2 біти
    int left_shift_result = a << 2;
    printf("a << 2 = %d (вісімкова: %o)\n", left_shift_result, left_shift_result);

    // Зсув вправо на 2 біти
    int right_shift_result = a >> 2;
    printf("a >> 2 = %d (вісімкова: %o)\n", right_shift_result, right_shift_result);

    return 0;
}

Приклад 2:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 
int main() { 
    int a = 0, b = 3, c;  // Оголошення та ініціалізація змінних a, b та c

    // Обчислення виразу та присвоєння результату змінній c
    // Пояснення:
    // b % 2 обчислює залишок від ділення b на 2, тобто 3 % 2 = 1 (true)
    // || - оператор логічного АБО (якщо перший операнд істинний, другий операнд не обчислюється)
    // (a >= 0) перевіряє чи a більше або дорівнює 0 (0 >= 0 = true)
    // (++b / 2 * a) обчислює інкремент b на 1 (b стає 4), ділить на 2 (4 / 2 = 2), множить на a (2 * 0 = 0)
    // (2 * 0) == 0 повертає true
    // В результаті, оскільки перша частина виразу (b % 2) є true, друга частина не обчислюється і результатом є true (1)
    c = b % 2 || (a >= 0) && (++b / 2 * a) == 0; 

    // Виведення значень змінних a та c
    // a залишається 0
    // c обчислено як 1
    printf("a=%d, c=%d\n", a, c);

    getch();  // Очікування натискання клавіші для завершення програми 
}

Приклад 3:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю
int main() {
    int a = 1, b = 0, c;  // Оголошення та ініціалізація змінних a, b та c

    // Обчислення виразу та присвоєння результату змінній c
    // Пояснення:
    // b + 2 обчислює значення 2 (оскільки b дорівнює 0)
    // || - оператор логічного АБО (якщо перший операнд істинний, другий операнд не обчислюється)
    // (a = 0) присвоює значення 0 змінній a, повертає 0 (false)
    // (++b * a) не виконується через те, що оператор || вже отримав true з лівого боку, отже, друга частина не обчислюється
    // Результат обчислення всього виразу: true (1)
    c = b + 2 || (a = 0) && (++b * a) == 0; 

    // Виведення значення змінної c
    printf("c=%d\n", c);  // Виведе "c=1", оскільки результат виразу є true (1)

    getch();  // Очікування натискання клавіші для завершення програми 
}

Приклад 4:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 
int main(void) {  // Об'явлення головної функції main без аргументів командного рядка
    int x = 2, z, y = 0;  // Оголошення та ініціалізація змінних x, z та y

    // Обчислення виразу та присвоєння результату змінній z
    // Пояснення:
    // (x == 0) - перевірка, чи x дорівнює 0 (у даному випадку x = 2, тому умова не виконується)
    // (y = x) - перевірка, чи y дорівнює x (у даному випадку y = 0,а x = 2, тому умова не виконується)
    // (y > 0) - перевірка, чи y більше 0 (умова не виконується, оскільки y = 0)
    // && - оператор логічного І (обидва операнди повинні бути true, щоб вираз був true)
    // || - оператор логічного АБО (якщо хоча б один операнд true, то вираз вважається true)
    // У цьому виразі, (x == 0) && (y == x) не виконується, тому зразу переходимо до (y > 0)
    // Таким чином, z отримує значення false, тобто 0, оскільки друга умова так само не виконується.
    z = (x == 0) && (y == x) || (y > 0);

    // Виведення значення змінної z
    printf("z=%d\n", z);  // Виведе "z=0"

    getch();  // Очікування натискання клавіші для завершення програми 
}


