Приклад 1:
#include <stdio.h>
#include <conio.h>

int main() {
    // Вивід розміру типів даних
    printf("Числа типу int займають %d байт.\n", sizeof(int));
    printf("Числа типу char займають %d байт.\n", sizeof(char));
    printf("Числа типу float займають %d байт.\n", sizeof(float));
    printf("Числа типу double займають %d байт.\n", sizeof(double));

    // Очікування натискання клавіші перед завершенням програми
    getch();

    return 0;
}

Приклад 2:
// Префіксний та постфіксний // інкремент ++ і декремент -- 
#include <stdio.h>
#include <conio.h>
int main(){ 
int n = 1; printf("n=%d\n",n);
// n++;
printf("prefix: ++n=%d\n",++n);
printf("postfix: n++=%d\n",n++);
printf("after-postfix: n=%d\n",n);
// n--;
printf("prefix: --n=%d\n",--n);
printf("postfix: n--=%d\n",n--);
printf("after-postfix: n=%d\n",n);
}

Приклад 3:
#include <stdio.h> // Підключаємо бібліотеку stdio.h для використання функцій вводу-виводу
int main() { // Початок функції main
    int n = 1, m = 1, res1, res2; // Оголошуємо змінні n, m, res1, res2 і присвоюємо n і m початкове значення 1

    res1 = ++n * (++m); // Інкрементуємо n і m (збільшуємо їх на 1) і обчислюємо їхній добуток. Присвоюємо результат змінній res1
    printf("res1 = %d\n", res1); // Виводимо значення res1 на екран

    res2 = --n - m; // Декрементуємо n (зменшуємо його на 1) і обчислюємо різницю між n і m. Присвоюємо результат змінній res2
    printf("res2 = %d", res2); // Виводимо значення res2 на екран

    return 0; // Повертаємо 0, що означає успішне завершення програми
}

Приклад 4:
#include <stdio.h>  // Підключаємо бібліотеку stdio.h для використання функцій вводу-виводу
#include <conio.h>  // Підключаємо бібліотеку conio.h для використання функції getch()

int main() {  // Початок функції main
    int a, b = 3;  // Оголошуємо змінну a та ініціалізуємо змінну b значенням 3
    float c;  // Оголошуємо змінну c типу float

    // Виконуємо кілька операцій і присвоюємо результат змінній c
    // Операції виконуються зліва направо відповідно до пріоритетів операторів
    c = b % 2 + (a = ++b / 2) + 1.1;

    // Ось що відбувається по кроках:
    // 1. ++b збільшує значення b на 1, тобто b стає 4
    // 2. ++b / 2 ділить 4 на 2, тобто результат 2 присвоюється a
    // 3. b % 2 обчислює залишок від ділення 4 на 2, результат 0
    // 4. Результат 0 додається до a (яке тепер 2), отримуємо 2
    // 5. До результату 2 додається 1.1, отримуємо 3.1
    // Тому c = 3.1

    printf("a = %d, c = %4.1f\n", a, c);  // Виводимо значення змінних a та c на екран

    return 0;  // Повертаємо 0, що означає успішне завершення програми
}

Приклад 5:
#include <stdio.h>  // Підключення заголовочного файлу для використання функцій введення-виведення

int main() {  // Початок функції main
    int x = 2, z;  // Оголошення змінних x зі значенням 2 та z без ініціалізації

    float y = 2.1;  // Оголошення змінної y зі значенням 2.1

    // Вираз для обчислення значення змінної z
    z = x++ * y + y / x * 3;

    // Ось що відбувається в цьому виразі:
    // 1. x++ збільшує x на 1 після використання його поточного значення у виразі, отже x++ поверне 2, але x стане 3
    // 2. x++ * y = 2 * 2.1 = 4.2
    // 3. y / x = 2.1 / 3 = 0.7
    // 4. y / x * 3 = 0.7 * 3 = 2.1
    // 5. 4.2 + 2.1 = 6.3
    // Отже, z = 6.3

    printf("x = %d, z = %d\n", x, z);  // Виведення значень змінних x та z на екран

    return 0;  // Повернення 0, що означає успішне завершення програми
}

Приклад 6:
#include <stdio.h>  // Підключення заголовкового файлу для використання функцій введення-виведення

int main() {  // Початок функції main

    float x = 1.1, y = 0, z;  // Оголошення змінних x зі значенням 1.1, y зі значенням 0 та змінної z без ініціалізації

    int a;  // Оголошення цілочисельної змінної a

    z = (a = x++) * y + 3 * x;  // Обчислення значення змінної z за допомогою виразу

    // Ось що відбувається в цьому виразі:
    // 1. x++ збільшує x на 1 після використання його поточного значення у виразі, отже x++ поверне 1.1, а x стане 2.1
    // 2. a = x++ присвоює змінній a значення x перед збільшенням, тобто a = 1.1, після чого x стає 2.1
    // 3. (a = x++) * y = 1.1 * 0 = 0
    // 4. 3 * x = 3 * 2.1 = 6.3
    // 5. 0 + 6.3 = 6.3
    // Отже, z = 6.3

    printf("z = %4.1f\n", z);  // Виведення значення змінної z на екран з одним знаком після коми

    return 0;  // Повернення 0, що означає успішне завершення програми
}
