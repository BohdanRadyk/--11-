Приклад 1:
#include <stdio.h>
void main(void){ 
float var1, var2;
printf("Введіть перше число (var1): ");
scanf("%f",&var1);
printf("Введіть друге число (var2): "); 
scanf("%f",&var2);
printf("varl > var2 дає %d\n", var1 > var2); 
printf("varl <var2 дає %d\n", var1 <var2);
printf("varl == var2 дає %d\n", var1 == var2); 
printf("var1 >= var2 дaє %d\n", var1 >= var2); 
printf("varl <= var2 дає %d\n", var1 <= var2); 
printf("varl != var2 дає %d\n", var1 != var2);
printf("!varl дaє %d\n", !var1);
printf("!var2 дає %d\n", !var2);
printf("var1 || var2 дає %d\n", var1 || var2);
printf("varl && vaг2 дає %d\n", var1 && var2);
}

Приклад 2:
#include <stdio.h>
#define TRUE "IСТИНА"
#define FALSE "ХИБНІСТЬ"
void main(void){ 
float var1, var2;
printf("Введіть перше число (var1): ");
scanf("%f",&var1);
printf("Введіть друге число (var2): ");
scanf("%f",&var2);
printf("varl > var2 це %s\n", var1 > var2 ? TRUE : FALSE); 
printf("var1 < var2 це %s\n", var1 <var2 ? TRUE : FALSE); 
printf("var1 == var2 це %s\n", var1 == var2 ? TRUE : FALSE);
printf("varl >= var2 це %s\n", var1 >= var2 ? TRUE : FALSE); 
printf("var1 <= var2 це %s\n", var1 <= var2 ? TRUE : FALSE); 
printf("varl != var2 це %s\n", var1 != var2 ? TRUE : FALSE); 
printf("var1 || var2 це %s\n", var1 || var2 ? TRUE : FALSE);
printf("varl && var2 це %s\n", var1 && var2 ? TRUE : FALSE); 
printf("!varl це %s\n", !var1? TRUE : FALSE);
printf("!var2 це %s\n", !var2? TRUE : FALSE);
}

Приклад 3:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу

int main() {  // Початок функції main
    int x, y, z;  // Оголошення змінних x, y, z

    x = 2;  // Присвоєння змінній x значення 2
    y = 1;  // Присвоєння змінній y значення 1
    z = 0;  // Присвоєння змінній z значення 0

    // Виконання логічного виразу та присвоєння результату змінній x
    // x = x && y || z:
    // x = 2 (true), y = 1 (true), z = 0 (false)
    // x && y: 2 (true) && 1 (true) -> true (1)
    // true || z: 1 (true) || 0 (false) -> true (1)
    x = x && y || z;

    printf("%d\n", x);  // Вивід значення змінної x (результат виразу) на екран

    // Виконання логічного виразу та виведення результату
    // x || !y && z:
    // x = 1 (після попереднього виразу), y = 1, z = 0
    // !y: !1 -> false (0)
    // false (0) && z: 0 && 0 -> false (0)
    // x || false: 1 || 0 -> true (1)
    printf("%d\n", x || !y && z);  // Вивід результату виразу на екран
}

Приклад 4:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 

void main() {  // Початок функції main
    int a = 0, b = 3, c;  // Оголошення змінних a, b, c та присвоєння початкових значень a = 0, b = 3

    // Виконання логічного виразу та присвоєння результату змінній c
    // Розклад виразу:
    // b % 2: обчислення залишку від ділення b на 2. Для b = 3, результат: 1 (true)
    // (a >= 0): перевірка, чи a більше або дорівнює 0. Для a = 0, результат: true (1)
    // (++b / 2 * a): спочатку виконується ++b, збільшує b на 1, тобто b = 4. Потім 4 / 2 = 2, 2 * 0 = 0
    // (a >= 0) && ((++b / 2) * a) == 0: true && true -> true
    // b % 2 || true: 1 || true -> true (1)
    c = b % 2 || (a >= 0) && (++b / 2 * a) == 0;

    // Виведення значень змінних a і c
    printf("a=%d, c=%d\n", a, c);  // Виведе a=0, c=1

    getch();  // Очікування натискання клавіші для завершення програми 
}

Приклад 5:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 

void main() {  // Початок функції main
    int a = 1, b = 0, c;  // Оголошення змінних a, b, c та присвоєння початкових значень: a = 1, b = 0

    // Виконання логічного виразу та присвоєння результату змінній c
    // Розклад виразу:
    // b * 2: обчислення добутку b та 2. Для b = 0, результат: 0 (false)
    // (a >= 0): перевірка, чи a більше або дорівнює 0. Для a = 1, результат: true (1)
    // ++b: збільшення b на 1. b стає 1.
    // (a >= 0) && (++b * a) == 0: true && (1 * 1) == 0 -> true && 1 == 0 -> true && false -> false (0)
    // 0 || false: false || false -> false (0)
    c = b * 2 || (a >= 0) && (++b * a) == 0;

    // Виведення значення змінної c
    printf("c=%d\n", c);  // Виведе c=0

    getch();  // Очікування натискання клавіші для завершення програми 
}

Приклад 6:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 

void main() {  // Початок функції main
    int x = 1, y = 2, z;  // Оголошення змінних x, y, z та присвоєння початкових значень: x = 1, y = 2

    // Виконання логічного виразу та присвоєння результату змінній z
    // Розклад виразу:
    // x / 2 * 7: обчислення частки від ділення x на 2, помноженої на 7. Для x = 1, результат: 0
    // (0 <= 0): перевірка, чи 0 менше або дорівнює 0. Результат: true (1)
    // (y < 0): перевірка, чи y менше 0. Для y = 2, результат: false (0)
    // true && false: true (1) AND false (0) -> false (0)
    // y % x: залишок від ділення y на x. Для y = 2, x = 1, результат: 0
    // (0 == 0): перевірка, чи 0 дорівнює 0. Результат: true (1)
    // false || true: false (0) OR true (1) -> true (1)
    z = (x / 2 * 7 <= 0) && (y < 0) || (y % x == 0);

    // Зменшення значення змінної z на 1 перед виведенням
    printf("z=%d\n", --z);  // Виведе z=0

    getch();  // Очікування натискання клавіші для завершення програми 
}

Приклад 7:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 

void main() {  // Початок функції main
    int x = 1, z, b = 0, y = 2;  // Оголошення змінних x, z, b, y та присвоєння початкових значень: x = 1, b = 0, y = 2

    // Виконання логічного виразу та присвоєння результату змінній z
    // Розклад виразу:
    // x++ * y >= 0:
    // x++: постфіксний інкремент, використовує x в обчисленні, потім збільшує x на 1. Для x = 1, результат: 1 * y = 1 * 2 = 2
    // 2 >= 0: перевірка, чи 2 більше або дорівнює 0. Результат: true (1)
    // true || b++ || (x / y * 3 == 0):
    // b++: постфіксний інкремент, використовує b в обчисленні, потім збільшує b на 1. Для b = 0, результат: 0 (поки що)
    // true || 0: true (1) OR false (0) -> true (1)
    // Ліва частина виразу вже true, тому решту виразу не обчислюється через коротке замикання (short-circuiting)
    z = (x++ * y >= 0) || b++ || (x / y * 3 == 0);

    // Виведення значення змінної z
    printf("z=%d\n", z);  // Виведе z=1

    getch();  // Очікування натискання клавіші для завершення програми 
}

Приклад 8:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 

void main() {  // Початок функції main
    int x = 1, y = 0, z = 2;  // Оголошення змінних x, y, z та присвоєння початкових значень: x = 1, y = 0, z = 2
    int a = 0;  // Оголошення змінної a та присвоєння початкового значення: a = 0

    // Виконання логічного виразу та присвоєння результату змінній z
    // Розклад виразу:
    // a = x++: присвоєння значення x (1) змінній a, після чого x збільшується на 1 (x = 2)
    // (a * y == 0) || a < 0 && z:
    // a * y: множення значення a (1) на y (0). Результат: 0 (false)
    // 0 == 0: перевірка, чи 0 дорівнює 0. Результат: true (1)
    // true || a < 0 && z: true OR (a < 0 && z)
    // a < 0: перевірка, чи a менше 0. Результат: false (0)
    // z: значення змінної z (2)
    // false && z: false AND z -> false (0)
    // true || false: true (1) OR false (0) -> true (1)
    z = ((a = x++) * y == 0 || a < 0 && z);

    // Виведення значення змінної z
    printf("z=%d\n", z);  // Виведе z=1

    getch();  // Очікування натискання клавіші для завершення програми 
}

Приклад 9:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 

void main() {  // Початок функції main
    int x = 2, z, y = 0;  // Оголошення змінних x, z, y та присвоєння початкових значень: x = 2, y = 0

    // Виконання логічного виразу та присвоєння результату змінній z
    // Розклад виразу:
    // x == 0: перевірка, чи x дорівнює 0. Для x = 2, результат: false (0)
    // (y = x): присвоєння значення x змінній y, після чого y має значення 2
    // (y > 0): перевірка, чи y більше 0. Для y = 2, результат: true (1)
    // false (0) && true (1) -> false (0)
    // false || (y > 0): false OR true -> true (1)
    z = (x == 0) && (y = x) || (y > 0);

    // Виведення значення змінної z
    printf("z=%d\n", z);  // Виведе z=0

    getch();  // Очікування натискання клавіші для завершення програми 
}

Приклад 10:
#include <stdio.h>  // Підключення стандартної бібліотеки вводу/виводу
#include <conio.h>  // Підключення бібліотеки для роботи з консоллю 

void main() {  // Початок функції main
    int x = 0, y = 3, z;  // Оголошення змінних x, y, z та присвоєння початкових значень: x = 0, y = 3

    // Виконання логічного виразу та присвоєння результату змінній z
    // Розклад виразу:
    // (++x > y): префіксний інкремент x (x = 1), порівняння x з y (1 > 3). Результат: false (0)
    // (y-- && y > 0): постфіксний декремент y (y = 2), перевірка y > 0 (2 > 0). Результат: true (1)
    // false || true: false (0) OR true (1) -> true (1)
    z = (++x > y || y-- && y > 0);

    // Виведення значення змінної z
    printf("z=%d\n", z);  // Виведе z=1

    getch();  // Очікування натискання клавіші для завершення програми
}

Приклад 11:
#include <stdio.h> 
#include <conio.h>

void main() {
    unsigned int x = 2, y = 1, z = 3, res;
    char chx = 0xAF;

    printf("%u\n", x & y);  // Виводить результат побітового І між x і y
    x = y = z = 2;
    printf("%u\n", x * y & z);  // Виводить результат побітового І між x*y та z

    x = 3; y = 0; z = 1;
    printf("x^y|~z=%u\n", x ^ y | ~z);  // Виводить результат побітового XOR між x та y, а потім результат побітового ІНАКШЕ зі змінною z

    printf("3&10=%u\n", x & y & z);  // Виводить результат побітового І між x, y та z

    printf("~3^2&0=%u\n", ~x ^ y & z);  // Виводить результат побітового ІНАКШЕ зі значенням ~x, потім побітового XOR зі значенням y, а потім результат побітового І зі змінною z

    printf("3&2=%u\n", x & y & z);  // Виводить результат побітового І між x, y та z

    printf("2++&~0~1=%u\n", y++ & ~z | ~x);  // Виводить результат побітового І зі значенням y, потім інкремент y, потім результат побітового ІНАКШЕ зі значенням ~z, а потім результат побітового І зі значенням ~x

    printf("~3&++1=%u\n", ~x & ++y);  // Виводить результат побітового ІНАКШЕ зі значенням ~x, потім інкремент y, а потім результат побітового І зі значенням 1

    x = 0xAF;
    printf("%X\n", x >> 4);  // Виводить результат зсуву x на 4 біти вправо в шістнадцятковому форматі

    chx <<= 7;
    printf("0x%X\n", chx);  // Виводить результат зсуву chx на 7 бітів вліво в шістнадцятковому форматі

    getch();  // Очікування натискання клавіші для завершення програми
}

Приклад 12:
#include <stdio.h> 
#include <conio.h>

void main() {
    char x = 255, y = 0177; 
    printf("%u\n", x & y); // Виводить результат побітового І між x та y (127)

    x = '(';  // Змінюємо 'x' на символ '('
    y = 017;  // Змінюємо 'y' на вісімкове число 017
    printf("%u\n", x & ~y); // Виводить результат побітового ІНАКШЕ між x та ~y (65424)

    y = 127;  // Змінюємо 'y' на десяткове число 127
    printf("%u\n", x & y); // Виводить результат побітового І між x та y

    y = 128;  // Змінюємо 'y' на десяткове число 128
    printf("%u\n", x & y); // Виводить результат побітового І між x та y

    getch(); // Очікування натискання клавіші для завершення програми
}



