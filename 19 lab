1.	Дослідити та дати пояснення прикладів, викладених нижче. a)
#include <stdio.h>

int main() {
    FILE *in; // File pointer declaration
    int ch;
    if ((in = fopen("proba.txt", "r")) != NULL) { // Open the file for reading and check if it exists. The pointer 'in' now refers to the FILE structure associated with 'proba'.
        while ((ch = getc(in)) != EOF) { // Get a character from 'in'
            putc(ch, stdout); // Output the character to the standard output (screen)
        }
        fclose(in); // Close the file
    } else {
        printf("File proba is not opened\n"); // Print an error message if the file 'proba' cannot be opened
    }
    return 0;
}
Скріншот виконання коду:



б).
#include <stdio.h>

int main() {
    FILE *ff;
    int base;
    ff = fopen("sam.txt", "r"); // Open the file named "sam" which is identified by the pointer ff.
 
    fscanf(ff, "%d", &base); // Read an integer from the file pointed to by ff.
    fclose(ff); // Close the file.
    
    ff = fopen("data.txt", "a"); // Open the file "data" in append mode.
    fprintf(ff, "sam is %d.\n", base); // Write "sam is <value of base>." to the file pointed to by ff.
    fclose(ff); // Close the file.
    
    return 0;
}

в).
#include <stdio.h>
#define LINE 80

int main() {
    FILE *ff;
    char string[LINE]; // Array declaration changed
    ff = fopen("opus.txt", "r");
    if (ff == NULL) {
        printf("Error opening file opus\n"); // Error message if the file opus cannot be opened
        return 1;
    }
    while (fgets(string, LINE, ff) != NULL) {
        printf("%s", string); // Print each line of the file to the screen
    }
    fclose(ff);
    return 0;
}
}












г).
Приклад читання форматованих даних з файлу "C:\\temp\\sample.txt":
/* Читання форматованих даних за допомогою функції fscanf(). */ #include <stdlib.h>
#include <stdio.h>

int main() {
    int f1, f2, f3, f4, f5;
    FILE *fp;

    fp = fopen("sample.txt", "r");
    if (fp == NULL) {
        perror("Error opening file");
        return 1;
    }

    fscanf(fp, "%d\n%d\n%d\n%d\n%d\n", &f1, &f2, &f3, &f4, &f5);
    printf("The values are %d, %d, %d, %d, %d\n", f1, f2, f3, f4, f5);

    fclose(fp);

    return 0;
}













2.	Розглянути функції форматного обміну з файлами fprintf(), fscanf() пояснити їх відмінності від функцій printf(), scanf().

Функції форматного обміну з файлами printf() і scanf() є аналогами функцій printf() і scanf(), але призначені для роботи з файлами. Ось їх відмінності та специфіка використання: fprintf() та printf(): printf() виводить форматовані дані на консоль (екран). fprintf() виводить форматовані дані у файл. Обидві функції використовують однаковий формат строки для форматування виведених даних, наприклад, %d для цілих чисел, %f для дробових чисел, тощо.
scanf() і scanf():
 scanf() зчитує введені дані з консолі (екрану) за допомогою форматних специфікаторів. 
fscanf() зчитує дані з файлу за допомогою форматних специфікаторів.
Відмінність  полягає в тому, що перша працює з файлами, а друга з виведенням на екран. Те ж саме стосується відмінності між fscanf() та scanf(): перша зчитує дані з файлу, а друга - з консолі.

3.	Виконати програму, що створює файл proba.txt і записує в нього символьні зображення чисел від 0 до 5 і їх кубів. Наступною програмою прочитати дані із файлу proba.txt. У звіті дати детальне пояснення роботи програм.
 
#include <stdio.h> 

int main(void) { 
    FILE *pf; 
    int k; 
    if ((pf = fopen("proba.txt", "w")) == NULL) { 
        perror("proba.txt"); 
        return 1; 
    } 
    for (k = 0; k <= 5; k++) { 
        fprintf(pf, "%d %d\n", k, k*k*k*k); // Writing data to the file 
    } 
    fclose(pf); 
    return 0; 
}



















#include <stdio.h>

int main(void) {
    FILE *pf;
    int n, nn, i;

    // Open the file "proba.txt" for reading
    if ((pf = fopen("proba.txt", "r")) == NULL) {
        perror("proba.txt");
        return 1;
    }

    // Read data from the file
    for (i = 0; i <= 5; i++) {
        fscanf(pf, "%d %d", &n, &nn);
        printf("Read values: %d, %d\n", n, nn); // Print read values for verification
    }

    // Close the file
    fclose(pf);

    return 0;
}












Виконати завдання згідно варіанта

 
#include <stdio.h>

// Функція для запису масиву у файл
void write_array_to_file(const int array[], int size, const char *filename) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Помилка відкриття файлу.\n");
        return;
    }

    for (int i = 0; i < size; i++) {
        fprintf(file, "%d ", array[i]);
    }

    fclose(file);
}

// Функція для зчитування масиву з файлу
void read_array_from_file(int array[], int size, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Помилка відкриття файлу.\n");
        return;
    }

    for (int i = 0; i < size; i++) {
        fscanf(file, "%d", &array[i]);
    }

    fclose(file);
}

// Функція для виведення масиву на екран
void print_array(const int array[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main() {
    int array[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int new_array[9];

    // Запис масиву у файл
    write_array_to_file(array, 9, "array.txt");

    // Зчитування масиву з файлу
    read_array_from_file(new_array, 9, "array.txt");

    // Виведення зчитаного масиву на екран
    printf("Зчитаний масив з файлу: ");
    print_array(new_array, 9);

    return 0;
}






Висновок
На даній лабораторній роботі дослідив способи створення, оновлення та оброблення файлів потокового уведення/виведення даних у мові С.
