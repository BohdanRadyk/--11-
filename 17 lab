Хід роботи :

1.	Переглянути теоретичний матеріал і приклади програм застосування функцій у С-програмах. Звернути увагу на способи передавання масивів у функції.
2.	Обов'язковою для оформлення програми є функція, вказана в індивідуальному завданні. В програмі можна використати й інші функції, якщо це сприятиме кращій структуризації програми.
#include <stdio.h>

// Функція для обчислення суми елементів масиву, більших від заданого числа
int sum_above(int arr[], int size, int limit) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] > limit) {
            sum += arr[i];
        }
    }
    return sum;
}

int main() {
    int arr[13] = {10, 25, 30, 22, 35, 40, 24, 50, 20, 15, 60, 45, 5};
    int limit = 24;
    int result;

    // Виклик функції для обчислення суми елементів масиву, більших від 24
    result = sum_above(arr, 13, limit);

    // Виведення результату
    printf("Сума елементів масиву, більших від %d: %d\n", limit, result);

    return 0;
}



3.	Написати головну частину програми – функцію main(), використовуючи в ній звертання до функцій відповідно до запропонованої структури програми. Визначити: які дані, в якому порядку і яким способом передаються у кожну функцію і як функція повертає у головну програму результати виконання.
#include <stdio.h>

// Функція для заповнення масиву
void fill_array(int arr[], int size) {
    printf("Введіть %d цілих чисел:\n", size);
    for (int i = 0; i < size; i++) {
        printf("Елемент %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
}

// Функція для обчислення суми елементів масиву, більших від заданого числа
int sum_above(int arr[], int size, int limit) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] > limit) {
            sum += arr[i];
        }
    }
    return sum;
}

// Функція для виведення результату
void print_result(int sum, int limit) {
    printf("Сума елементів масиву, більших від %d: %d\n", limit, sum);
}

int main() {
    int arr[13];
    int limit = 24;
    int result;

    // Заповнення масиву
    fill_array(arr, 13);

    // Обчислення суми елементів масиву, більших від 24
    result = sum_above(arr, 13, limit);

    // Виведення результату
    print_result(result, limit);

    return 0;
}






4.	Написати відповідну функцію (або декілька функцій), звертаючи увагу на   типи опису параметрів і способи передавання масивів.








#include <stdio.h>

// Функція для заповнення двовимірного масиву
void fill_matrix(int matrix[4][5]) {
    printf("Введіть елементи масиву 4x5:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Функція для пошуку максимального елемента в рядку
int find_max_in_row(int row[], int size) {
    int max = row[0];
    for (int i = 1; i < size; i++) {
        if (row[i] > max) {
            max = row[i];
        }
    }
    return max;
}

int main() {
    int matrix[4][5];
    int max_elements[4];

    // Заповнення двовимірного масиву
    fill_matrix(matrix);

    // Пошук максимальних елементів кожного рядка
    for (int i = 0; i < 4; i++) {
        max_elements[i] = find_max_in_row(matrix[i], 5);
    }

    // Виведення максимальних значень кожного рядка
    printf("Максимальні значення кожного рядка:\n");
    for (int i = 0; i < 4; i++) {
        printf("Рядок %d: %d\n", i + 1, max_elements[i]);
    }

    return 0;
}




Висновок
На даній лабораторній роботі навчився використовувати вказівники, дослідив їх особливості.
